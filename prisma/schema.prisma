/// ---------- Generators ----------
generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/@prisma/client"
}

/// ---------- Datasource ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ---------- Models ----------
model User {
  id            Int                 @id @default(autoincrement())
  username      String              @db.VarChar(255)
  email         String              @unique @db.VarChar(255)
  password      String              @db.VarChar(255)
  role          Role? // Only set for ADMINs; default null
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  refreshTokens RefreshToken[]
  events        Event[]             @relation("OrganizedEvents")
  registrations EventRegistration[] // Tracks which events the user registered for
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  revoked   Boolean  @default(false)
  ip        String?
  userAgent String?

  @@index([userId])
  @@index([userId, revoked])
  @@index([token])
}

model Event {
  id            Int                 @id @default(autoincrement())
  title         String
  description   String?
  location      String
  startDate     DateTime
  endDate       DateTime
  startTime     String?
  endTime       String?
  capacity      Int?
  category      String?
  tags          String[]
  imageUrl      String?
  organizer     User                @relation("OrganizedEvents", fields: [organizerId], references: [id])
  organizerId   Int
  timeZone      String?
  status        EventStatus         @default(SCHEDULED)
  registrations EventRegistration[] // Who has registered for this event
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([organizerId])
}

model EventRegistration {
  id        Int      @id @default(autoincrement())
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@unique([eventId, userId]) // Prevent duplicate registrations
  @@index([userId])
  @@index([eventId])
}

/// ---------- Enums ----------
enum Role {
  ADMIN
}

enum EventStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
  POSTPONED
}
