// prisma/schema.prisma

/// ---------- Generators ----------
generator client {
  provider = "prisma-client-js"
  // output   = "./node_modules/@prisma/client"
}

/// ---------- Datasource ----------
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// ---------- Models ----------
model User {
  id            Int            @id @default(autoincrement())
  username      String         @db.VarChar(255)
  email         String         @unique @db.VarChar(255)
  password      String         @db.VarChar(255)
  role          Role           @default(ATTENDEE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  events        Event[]        @relation("OrganizedEvents")
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  revoked   Boolean  @default(false)
  ip        String?
  userAgent String?

  @@index([userId])
  @@index([userId, revoked])
  @@index([token])
}

model Event {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  location    String
  startDate   DateTime
  endDate     DateTime
  startTime   String?
  endTime     String?
  capacity    Int?
  category    String?
  tags        String[]
  imageUrl    String?
  organizer   User        @relation("OrganizedEvents", fields: [organizerId], references: [id])
  organizerId Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  timeZone    String?
  status      EventStatus @default(SCHEDULED)

  @@index([organizerId])
}


/// ---------- Enums ----------
enum Role {
  ATTENDEE
  ORGANIZER
  ADMIN
}

enum EventStatus {
  SCHEDULED
  ONGOING
  COMPLETED
  CANCELLED
  POSTPONED
}
